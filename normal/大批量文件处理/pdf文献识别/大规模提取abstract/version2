#只能匹配到abstract才有希望，否则会提取奇怪的信息
#现在可以提取更多类型了，甚至还可以解释特殊符号，而且没有找到abstract还会标识special

import os
import re
import fitz
import pandas as pd
import gc
import gc
from collections import defaultdict  # 添加缺失的导入

_control_chars_re = re.compile(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f]')  # 保留\t\n\r
_private_use_re = re.compile(r'[\ue000-\uf8ff\U000f0000-\U000ffffd\U00100000-\U0010fffd]', flags=re.UNICODE)
_whitespace_re = re.compile(r'\s+')


def clean_excel_text(text):
    """强化版Excel文本清洗（支持Unicode高位字符过滤）"""
    if not isinstance(text, (str, bytes)):
        return text  # 非文本类型直接返回

    text = str(text)

    # 第一阶段：替换控制字符（保留\t=0x09 \n=0x0A \r=0x0D）
    text = _control_chars_re.sub(' ', text)

    # 第二阶段：移除Unicode私有区域和XML禁止字符
    # 范围涵盖：基本多语言平面（U+E000-U+F8FF）、辅助私有区域（U+F0000-U+FFFFD, U+100000-U+10FFFD）
    text = _private_use_re.sub('', text)

    # 第三阶段：过滤XML 1.0禁止字符（如U+FFFE, U+FFFF等）
    # 通过逐个字符检查实现精确控制
    cleaned_chars = []
    for char in text:
        code = ord(char)
        if (
                (0x20 <= code <= 0xD7FF) or
                (code in (0x09, 0x0A, 0x0D)) or  # 保留\t\n\r
                (0xE000 <= code <= 0xFFFD) or
                (0x10000 <= code <= 0x10FFFF)  # 但需排除私有区域（已在第二阶段处理）
        ):
            cleaned_chars.append(char)
        else:
            cleaned_chars.append(' ')  # 替换非法字符为空格

    # 合并处理结果
    text = ''.join(cleaned_chars)

    # 第四阶段：合并连续空白
    text = _whitespace_re.sub(' ', text).strip()

    return text


def extract_abstract(pdf_path):
    try:
        abstract_pattern = re.compile(
            r'(?i)(\babstract\b|a\s*b\s*s\s*t\s*r\s*a\s*c\s*t)\b[\s:]*'
        )
        end_pattern = re.compile(
            r'(?i)(^\s*(introduction|1\s*\.|i\s*n\s*t\s*r\s*o\s*d\s*u\s*c\s*t\s*i\s*o\s*n)\b|key\s?words)'
        )

        full_text = []
        column_layout = False
        found_abstract = False  # 新增标志位

        with fitz.open(pdf_path) as doc:
            # ===== 分栏分析 =====
            columns = defaultdict(list)
            for page in doc[:2]:#检测页数
                blocks = page.get_text("blocks", sort=False)
                for b in blocks:
                    x0 = b[0]
                    col_id = int(x0 // 40)
                    columns[col_id].append(b)

            if len(columns) > 1:
                column_layout = True
                sorted_blocks = []
                for col in sorted(columns):
                    sorted_blocks += sorted(columns[col], key=lambda x: x[1])
                full_text = [b[4].replace('-\n', '').strip() + '¶' for b in sorted_blocks]
            else:
                # ===== 常规处理 =====
                for page in doc[:2]:
                    blocks = page.get_text("blocks", sort=True)
                    page_height = page.rect.height
                    for b in blocks:
                        y0, y1 = b[1], b[3]
                        if y1 < 0.07 * page_height or y0 > 0.93 * page_height:
                            continue
                        text = b[4].replace('-\n', '').strip()
                        if len(text) < 20 and (y1 < 0.1 * page_height or y0 > 0.9 * page_height):
                            continue
                        full_text.append(text + '¶')

            full_text = ' '.join(full_text).replace('¶ ', '\n\n').replace('¶', '')

            # ===== 截断策略 =====
            match = abstract_pattern.search(full_text)
            if match:
                found_abstract = True  # 明确找到Abstract关键词
                start = match.end()
            else:
                start = 0  # 未找到Abstract，从开头尝试推测

            if column_layout:
                # 简化的分栏截断逻辑
                end = full_text.find('\n\n', start + 500)  # 查找双换行符
                end = end if end != -1 else len(full_text)
            else:
                end_match = end_pattern.search(full_text[start:])
                end = start + end_match.start() if end_match else None

            abstract = full_text[start:end].strip() if end else full_text[start:].strip()
            return re.sub(r'\s+([.:,;])', r'\1', abstract[:20000]),found_abstract

    except Exception as e:
        return f"Extraction Error: {str(e)}",False
    finally:
        gc.collect()


def extract_article_name(filename):
    """更健壮的文件名解析"""
    base_name = os.path.splitext(filename)[0]
    separators = [' - ', '–', '-', '_', '：']
    for sep in separators:
        if sep in base_name:
            return base_name.split(sep)[-1].strip()
    return base_name



def process_pdfs(folder_path):
    data = []
    error_log = []

    for filename in os.listdir(folder_path):
        if not filename.lower().endswith('.pdf'):
            continue

        pdf_path = os.path.join(folder_path, filename)
        status = "Success"  # 默认状态
        article_name = ""
        abstract = ""
        error_msg = ""
        found_abstract = False  # 接收标志位

        try:
            article_name = extract_article_name(filename)
            abstract, found_abstract = extract_abstract(pdf_path)  # 获取标志位

            # 处理提取错误
            if isinstance(abstract, str) and abstract.startswith("Extraction Error:"):
                raise RuntimeError(abstract)

            # 判断状态：明确找到Abstract -> Success；推测内容 -> Special
            if not found_abstract:
                if abstract.strip():  # 有推测内容但未找到Abstract关键词
                    status = "Special"
                    if len(abstract) < 30:  # 对推测内容放宽长度要求
                        abstract = "[推测内容过短] " + abstract
                else:  # 无内容
                    raise ValueError("No content extracted")

            # 对明确找到的Abstract严格要求长度
            if found_abstract and len(abstract) < 50:
                raise ValueError(f"Abstract too short ({len(abstract)} chars)")

        except Exception as e:
            status = "Failed"
            error_msg = f"{type(e).__name__}: {str(e)}"
            error_log.append(f"{filename}: {error_msg}")
            print(f"\033[31mFailed: {filename} - {error_msg}\033[0m")

        finally:
            # 记录到Excel，Special状态单独标记
            data.append({
                'Filename': clean_excel_text(filename),
                'Article Name': clean_excel_text(article_name),
                'Abstract': clean_excel_text(abstract),
                'Status': status,
                'Error Info': clean_excel_text(error_msg)
            })

    # 生成Excel（包含所有记录）
    df = pd.DataFrame(data)
    columns_order = ['Filename', 'Article Name', 'Status', 'Abstract', 'Error Info']
    df[columns_order].to_excel('results.xlsx', index=False, engine='openpyxl')

    # 保存详细错误日志
    if error_log:
        with open('error_log.txt', 'w') as f:
            f.write('\n'.join(error_log))

    print(f"处理完成！总计：{len(data)}，成功：{len(df[df['Status'] == 'Success'])}，失败：{len(error_log)}")


if __name__ == "__main__":
    process_pdfs(r"D:\Users\bo\PycharmProjects\DocH\CRC-9")
